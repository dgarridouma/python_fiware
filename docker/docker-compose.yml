version: "3.6"
services:
        
 mongo-db:
   image: mongo:${MONGO_DB_VERSION}
   command: --nojournal
   networks:
      default:
   volumes:
      - mongo-db:/data
   ports:
      - "27017:27017"
   expose:
      - "27017"      

 orion:
   image: fiware/orion:${ORION_VERSION}
   ports:
     - "${ORION_PORT}:${ORION_PORT}"
   command: -dbhost mongo-db
   networks:
      default:
      
  # IoT-Agent is configured for the UltraLight Protocol
 iot-agent:
    image: fiware/iotagent-ul:${ULTRALIGHT_VERSION}
    hostname: iot-agent
    depends_on:
      - mongo-db
    ports:
      - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
      - "${IOTA_SOUTH_PORT}:${IOTA_SOUTH_PORT}" # localhost:7896
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context
      - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_HTTP_PORT=${IOTA_SOUTH_PORT} # The port used for device traffic over HTTP
      - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
 #     - IOTA_MQTT_HOST=mosquitto # The host name of the MQTT Broker
 #     - IOTA_MQTT_PORT=1883 # The port the MQTT Broker is listening on to receive topics
      - IOTA_DEFAULT_RESOURCE=/iot/d
    healthcheck:
      interval: 5s
    networks:
      default:

 iot-agent-json:
   image: fiware/iotagent-json:${ULTRALIGHT_VERSION}
   hostname: iot-agent
   depends_on:
     - mongo-db
   networks:
     default:
   ports:
     - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
     - "${IOTA_SOUTH_PORT}:${IOTA_SOUTH_PORT}" # localhost:7896
   environment:
     - IOTA_CB_HOST=orion
     - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context
     - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
     - IOTA_REGISTRY_TYPE=mongodb
     - IOTA_LOG_LEVEL=DEBUG
     - IOTA_TIMESTAMP=true
     - IOTA_CB_NGSI_VERSION=v2
     - IOTA_AUTOCAST=true
     - IOTA_MONGO_HOST=mongo-db
     - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
     - IOTA_MONGO_DB=iotagentjson
     - IOTA_HTTP_PORT=${IOTA_SOUTH_PORT} # The port used for device traffic over HTTP
     - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
     - IOTA_DEFAULT_RESOURCE=/iot/json


  # IoT-Agent is configured for the UltraLight Protocol with MQTT
 iot-agent-mqtt:
    image: fiware/iotagent-ul:${ULTRALIGHT_VERSION}
    hostname: iot-agent
    depends_on:
      - mongo-db
    ports:
      - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
      - "${IOTA_SOUTH_PORT}:${IOTA_SOUTH_PORT}" # localhost:7896
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context
      - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=v2 # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_HTTP_PORT=${IOTA_SOUTH_PORT} # The port used for device traffic over HTTP
      - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
      - IOTA_MQTT_HOST=mosquitto # The host name of the MQTT Broker
      - IOTA_MQTT_PORT=1883 # The port the MQTT Broker is listening on to receive topics
      - IOTA_DEFAULT_RESOURCE= # Default is blank. I'm using MQTT so I don't need a resource
    healthcheck:
      interval: 5s
    networks:
      default:

 iot-agent-json-mqtt:
          image: fiware/iotagent-json:${ULTRALIGHT_VERSION}
          hostname: iot-agent
          depends_on:
            - mongo-db
          networks:
            default:
          ports:
            - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
            - "${IOTA_SOUTH_PORT}:${IOTA_SOUTH_PORT}" # localhost:7896
          environment:
            - IOTA_CB_HOST=orion
            - IOTA_CB_PORT=${ORION_PORT} # port the context broker listens on to update context
            - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
            - IOTA_REGISTRY_TYPE=mongodb
            - IOTA_LOG_LEVEL=DEBUG
            - IOTA_TIMESTAMP=true
            - IOTA_CB_NGSI_VERSION=v2
            - IOTA_AUTOCAST=true
            - IOTA_MONGO_HOST=mongo-db
            - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
            - IOTA_MONGO_DB=iotagentjson
            - IOTA_HTTP_PORT=${IOTA_SOUTH_PORT} # The port used for device traffic over HTTP
            - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
            - IOTA_MQTT_HOST=mosquitto # The host name of the MQTT Broker
            - IOTA_MQTT_PORT=1883 # The port the MQTT Broker is listening on to receive topics
            - IOTA_DEFAULT_RESOURCE= # Default is blank. I'm using MQTT so I don't need a resource


 cygnus:
    image: fiware/cygnus-ngsi:${CYGNUS_VERSION}
    hostname: cygnus
    container_name: fiware-cygnus
    depends_on:
        - mongo-db
    expose:
        - "${CYGNUS_API_PORT}"
    ports:
        - "${CYGNUS_MONGO_SERVICE_PORT}:${CYGNUS_MONGO_SERVICE_PORT}"
        - "${CYGNUS_API_PORT}:${CYGNUS_API_PORT}"
    environment:
        - "CYGNUS_MONGO_HOSTS=mongo-db:${MONGO_DB_PORT}"
        - "CYGNUS_MONGO_SERVICE_PORT=${CYGNUS_MONGO_SERVICE_PORT}"
        - "CYGNUS_LOG_LEVEL=DEBUG"
        - "CYGNUS_API_PORT=${CYGNUS_API_PORT}"
        - "CYGNUS_SERVICE_PORT=${CYGNUS_MONGO_SERVICE_PORT}"
    networks:
      default:

 cygnus-mysql:
    image: fiware/cygnus-ngsi:${CYGNUS_VERSION}
    hostname: cygnus
    container_name: fiware-cygnus
    depends_on:
        - mysql-db
    expose:
        - "${CYGNUS_API_PORT}"
    ports:
        - "${CYGNUS_MYSQL_SERVICE_PORT}:${CYGNUS_MYSQL_SERVICE_PORT}"
        - "${CYGNUS_API_PORT}:${CYGNUS_API_PORT}"
    environment:
        - "CYGNUS_LOG_LEVEL=DEBUG"
        - "CYGNUS_API_PORT=${CYGNUS_API_PORT}"
        - "CYGNUS_MYSQL_HOST=mysql-db"
        - "CYGNUS_MYSQL_PORT=${CYGNUS_MYSQL_PORT}"
        - "CYGNUS_MYSQL_USER=root"
        - "CYGNUS_MYSQL_PASS=secret"     # Just for testing
        - "CYGNUS_MYSQL_SERVICE_PORT=${CYGNUS_MYSQL_SERVICE_PORT}"           
        - "CYGNUS_SERVICE_PORT=${CYGNUS_MYSQL_SERVICE_PORT}"
    networks:
      default:
          

 cygnus-multi:
    image: fiware/cygnus-ngsi:${CYGNUS_VERSION}
    hostname: cygnus
    container_name: fiware-cygnus
    depends_on:
        - mongo-db
        - mysql-db
    expose:
        - "${CYGNUS_API_PORT}"
    ports:
        - "${CYGNUS_MONGO_SERVICE_PORT}:${CYGNUS_MONGO_SERVICE_PORT}"
        - "${CYGNUS_MYSQL_SERVICE_PORT}:${CYGNUS_MYSQL_SERVICE_PORT}"
        - "${CYGNUS_API_PORT}:${CYGNUS_API_PORT}"
    environment:
        - "CYGNUS_MULTIAGENT=true"
        - "CYGNUS_LOG_LEVEL=DEBUG"
        - "CYGNUS_API_PORT=${CYGNUS_API_PORT}"
        - "CYGNUS_MONGO_HOSTS=mongo-db:${MONGO_DB_PORT}"
        - "CYGNUS_MONGO_SERVICE_PORT=${CYGNUS_MONGO_SERVICE_PORT}"
        - "CYGNUS_MYSQL_HOST=mysql-db"
        - "CYGNUS_MYSQL_PORT=${CYGNUS_MYSQL_PORT}"
        - "CYGNUS_MYSQL_USER=root"
        - "CYGNUS_MYSQL_PASS=secret"     # Just for testing
        - "CYGNUS_MYSQL_SERVICE_PORT=${CYGNUS_MYSQL_SERVICE_PORT}"           
        - "CYGNUS_SERVICE_PORT=${CYGNUS_MYSQL_SERVICE_PORT}"
    networks:
      default:
      

 mosquitto:
   image: eclipse-mosquitto:1.6.13
   hostname: mosquitto
   container_name: mosquitto
   networks:
      default:
   expose:
       - "1883"
       - "9001"
   ports:
       - "1883:1883"
       - "9001:9001"
   volumes:
       - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf


 spark-master:
    image: bde2020/spark-master:${SPARK_VERSION}
    container_name: spark-master
    expose:
      - "${SPARK_WEB_APP_PORT}"
      - "${SPARK_SERVICE_PORT}"
    ports:
      - "${SPARK_WEB_APP_PORT}:${SPARK_WEB_APP_PORT}"
      - "${SPARK_MASTER_PORT}:${SPARK_MASTER_PORT}"
      - "${SPARK_SERVICE_PORT}:${SPARK_SERVICE_PORT}"
    environment:
      - INIT_DAEMON_STEP=setup_spark
      - "constraint:node==spark-master"
    networks:
      default:

 spark-worker-1:
    image: bde2020/spark-worker:${SPARK_VERSION}
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "${SPARK_WORKER_1_PORT}:${SPARK_WORKER_1_PORT}"
    environment:
      - "SPARK_MASTER=spark://spark-master:${SPARK_MASTER_PORT}"
      - "constraint:node==spark-master"
    volumes:
      - ./cosmos-examples:/home/cosmos-examples/
      - ./log4j.properties:/spark/conf/log4j.properties
    networks:
      default:
        
 sth-comet:
    image: fiware/sth-comet:${STH_COMET_VERSION}
    container_name: fiware-sth-comet
    depends_on:
        - mongo-db
    networks:
      default:
    ports:
        - "${STH_COMET_PORT}:${STH_COMET_PORT}"
    environment:
        - STH_HOST=0.0.0.0
        - STH_PORT=${STH_COMET_PORT}
        - DB_PREFIX=sth_
        - DB_URI=mongo-db:${MONGO_DB_PORT}
        - LOGOPS_LEVEL=DEBUG
        
 crate-db:
    image: crate:${CRATE_VERSION}
    hostname: crate-db
    ports:
        # Admin UI
        - "4200:4200"
        # Transport protocol
        - "4300:4300"
    command:
        crate -Cdiscovery.type=single-node 
    environment:
        - CRATE_HEAP_SIZE=2g
    networks:
      default:

 quantumleap:
    image: orchestracities/quantumleap:${QUANTUMLEAP_VERSION}
    hostname: quantumleap
    ports:
        - "${QUANTUMLEAP_PORT}:${QUANTUMLEAP_PORT}"
    depends_on:
        - crate-db
    environment:
        - CRATE_HOST=crate-db
        - LOGLEVEL=DEBUG
    networks:
      default:

 grafana:
    image: grafana/grafana:8.4.5
    depends_on:
        - crate-db
    ports:
        - "3003:3000"
    environment:
        - GF_INSTALL_PLUGINS=https://github.com/orchestracities/grafana-map-plugin/releases/download/v1.4.2/orchestracities-map-panel-1.4.2.zip;grafana-map-plugin,grafana-clock-panel,grafana-worldmap-panel 
    networks:
      default:
        
 wirecloud:
    image: fiware/wirecloud:${WIRECLOUD_VERSION}
    container_name: fiware-wirecloud
    hostname: wirecloud
    ports:
      - "${WIRECLOUD_PORT}:${WIRECLOUD_PORT}" # localhost:8000
    networks:
      default:

    restart: always
    depends_on:
      - keyrock
      - elasticsearch
      - memcached
      - postgres-db
    environment:
      - DEBUG=True
      - DEFAULT_THEME=wirecloud.defaulttheme
      - DB_HOST=postgres-db
      - DB_PASSWORD=wirepass   # Change this password!
      - FORWARDED_ALLOW_IPS=*
      - ELASTICSEARCH2_URL=http://elasticsearch:9200/
      - MEMCACHED_LOCATION=memcached:11211
      - FIWARE_IDM_PUBLIC_URL=http://localhost:${KEYROCK_PORT} # not work on Debian container
      - FIWARE_IDM_SERVER=http://keyrock:${KEYROCK_PORT}
      - SOCIAL_AUTH_FIWARE_KEY=wirecloud-dckr-site-0000-00000000000
      - SOCIAL_AUTH_FIWARE_SECRET=wirecloud-docker-000000-clientsecret
    volumes:
      - wirecloud-data:/opt/wirecloud_instance/data
      - wirecloud-static:/var/www/static
  
 keyrock:
    image: fiware/idm:${KEYROCK_VERSION}
    container_name: fiware-keyrock
    hostname: keyrock
    networks:
      default:
    depends_on:
      - mysql-db
    ports:
      - "${KEYROCK_PORT}:${KEYROCK_PORT}" # localhost:3005
      - "${KEYROCK_HTTPS_PORT}:${KEYROCK_HTTPS_PORT}" # localhost:3443
    environment:
      - DEBUG=idm:*
      - IDM_DB_HOST=mysql-db
      - IDM_DB_PASS_FILE=/run/secrets/my_secret_data
      - IDM_DB_USER=root
      - IDM_HOST=http://localhost:${KEYROCK_PORT}
      - IDM_PORT=${KEYROCK_PORT}
      - IDM_ADMIN_USER=alice
      - IDM_ADMIN_EMAIL=alice-the-admin@test.com
      - IDM_ADMIN_PASS=test
    secrets:
      - my_secret_data
    healthcheck:
      interval: 5s

  # Databases
 postgres-db:
    image: postgres
    hostname: postgres-db
    container_name: db-postgres
    restart: always
    ports:
      - "${POSTGRES_DB_PORT}:${POSTGRES_DB_PORT}"
    networks:
      default:
    environment:
      - POSTGRES_PASSWORD=wirepass   # Change this password!
    volumes:
      - postgres-db:/var/lib/postgresql/data

 mysql-db:
    restart: always
    image: mysql:${MYSQL_DB_VERSION}
    hostname: mysql-db
    container_name: db-mysql
    expose:
      - "${MYSQL_DB_PORT}"
    ports:
      - "${MYSQL_DB_PORT}:${MYSQL_DB_PORT}" # localhost:3306
    networks:
      default:
    environment:
      - "MYSQL_ROOT_PASSWORD_FILE=/run/secrets/my_secret_data"
      - "MYSQL_ROOT_HOST=%"
    volumes:
      - mysql-db:/var/lib/mysql
      - ./mysql-data:/docker-entrypoint-initdb.d/:ro # Preload Keyrock Users
    secrets:
      - my_secret_data

  # Other services

 ngsi-proxy:
    image: fiware/ngsiproxy:1.2.0
    hostname: ngsi-proxy
    container_name: wc-ngsi-proxy
    networks:
      default:
    expose:
      - "8100"
    ports:
      - "8100:8100"
    environment:
      - PORT=8100
      - TRUST_PROXY_HEADERS=0

 elasticsearch:
    image: elasticsearch:2.4
    container_name: wc-elasticsearch
    hostname: elasticsearch
    ports:
      - "9200:9200"
    networks:
      default:

    restart: always
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    command: elasticsearch -Des.index.max_result_window=50000

 memcached:
    image: memcached:1
    container_name: wc-memcached
    hostname: memcached
    ports:
      - "11211:11211"
    networks:
      default:

    restart: always
    command: memcached -m 2048m

 perseo-core:
  image: fiware/perseo-core
  environment:
    - PERSEO_FE_URL=http://perseo-fe:9090
    - MAX_AGE=6000
  networks:
    default:
  ports:
    - 8080:8080    
  depends_on:
    - mongo-db
 
 perseo-fe:
  image: fiware/perseo
  networks:
    default:
  ports:
    - 9090:9090
  depends_on:
    - perseo-core
  environment:
    - PERSEO_MONGO_ENDPOINT=mongo-db
    - PERSEO_CORE_URL=http://perseo-core:8080
    - PERSEO_LOG_LEVEL=debug
    - PERSEO_ORION_URL=http://orion:1026/
 
networks:
  default:
    name: iot
    
secrets:
  my_secret_data:
    file: ./secrets.txt

volumes:
 mysql-db: ~
 postgres-db: ~
 elasticsearch-data: ~
 wirecloud-static: ~
 wirecloud-data: ~
 mongo-db: ~ 
 